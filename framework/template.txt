use common::{Answer, solution};
use miette::Result;

solution!("{{problem_name}}", {{day}});

fn part_1(input: &str) -> Result<Answer> {
    Ok(Answer::Unimplemented)
}

fn part_2(input: &str) -> Result<Answer> {
    Ok(Answer::Unimplemented)
}

#[cfg(test)]
mod test {
    use indoc::indoc;
    use common::load_raw;

    const CASE: &str = indoc! {"
        ...
    "};

    #[test]
    // #[test_log::test]
    fn part_1_case() -> miette::Result<()>{
        assert_eq!(super::part_1(CASE)?, ().into());
        Ok(())
    }

    #[test]
    // #[test_log::test]
    fn part_2_case() -> miette::Result<()> {
        assert_eq!(super::part_2(CASE)?, ().into());
        Ok(())
    }

    #[test]
    // #[test_log::test]
    #[ignore]
    fn part_1() -> miette::Result<()> {
        let input = load_raw({{year}}, {{day}})?;
        assert_eq!(super::part_1(input.as_str())?, ().into());
        Ok(())
    }

    #[test]
    // #[test_log::test]
    #[ignore]
    fn part_2() -> miette::Result<()> {
        let input = load_raw({{year}}, {{day}})?;
        assert_eq!(super::part_2(input.as_str())?, ().into());
        Ok(())
    }
}
